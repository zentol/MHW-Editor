using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using JetBrains.Annotations;
using MHW_Editor.Armors;
using MHW_Editor.Assets;
using MHW_Editor.Gems;
using MHW_Editor.Items;
using MHW_Editor.Models;
using MHW_Editor.Skills;
using MHW_Editor.Weapons;
using MHW_Template;
using MHW_Template.Models;
using MHW_Template.Weapons;
using Microsoft.Win32;

namespace MHW_Editor {
    public partial class MainWindow {
#if DEBUG
        private const bool ENABLE_CHEAT_BUTTONS = true;
        private const bool SHOW_RAW_BYTES = true;
#else
        private const bool ENABLE_CHEAT_BUTTONS = false;
        private const bool SHOW_RAW_BYTES = false;
#endif
        private static readonly string[] FILE_TYPES = {
            "*.am_dat",
            "*.arm_up",
            "*.ask",
            "*.bbtbl",
            "*.eq_crt",
            "*.eq_cus",
            "*.itm",
            "*.kire",
            "*.new_lb",
            "*.new_lbr",
            "*.plfe",
            "*.plit",
            "*.sgpa",
            "*.shl_tbl",
            "*.skl_dat",
            "*.skl_pt_dat",
            "*.wep_glan",
            "*.wep_saxe",
            "*.wep_wsd",
            "*.wep_wsl",
            "*.wp_dat",
            "*.wp_dat_g",
        };

        private readonly ObservableCollection<dynamic> items = new ObservableCollection<dynamic>();
        private string targetFile;
        private Type targetFileType;
        private Dictionary<string, ColumnHolder> columnMap;

        public static string locale = "eng";
        public string Locale {
            get => locale;
            set {
                locale = value;
                foreach (MhwItem item in items) {
                    item.OnPropertyChanged(nameof(IMhwItem.Name),
                                           nameof(SkillDat.Name_And_Id),
                                           nameof(SkillDat.Description),
                                           nameof(EqCrt.Mat_1_Id_button),
                                           nameof(EqCrt.Mat_2_Id_button),
                                           nameof(EqCrt.Mat_3_Id_button),
                                           nameof(EqCrt.Mat_4_Id_button),
                                           nameof(NewLimitBreak.Needed_Item_Id_to_Unlock_button),
                                           nameof(ASkill.Mantle_Item_Id_button),
                                           nameof(Armor.Set_Skill_1_button),
                                           nameof(Armor.Set_Skill_2_button),
                                           nameof(Armor.Skill_1_button),
                                           nameof(Armor.Skill_2_button),
                                           nameof(Armor.Skill_3_button),
                                           nameof(Melee.Skill_button));
                }
            }
        }

        public static bool showIdBeforeName = true;
        public bool ShowIdBeforeName {
            get => showIdBeforeName;
            set {
                showIdBeforeName = value;
                foreach (MhwItem item in items) {
                    item.OnPropertyChanged(nameof(Gem.Skill_1_button), nameof(Gem.Skill_2_button));
                }
            }
        }

        public bool SingleClickToEditMode { get; set; } = true;

        [CanBeNull]
        private CancellationTokenSource savedTimer;

        public MainWindow() {
            InitializeComponent();

            cbx_localization.ItemsSource = Global.LANGUAGE_NAME_LOOKUP;

            dg_items.AutoGeneratingColumn += Dg_items_AutoGeneratingColumn;
            dg_items.AutoGeneratedColumns += Dg_items_AutoGeneratedColumns;
            dg_items.GotFocus += Dg_items_GotFocus;
            dg_items.Sorting += Dg_items_Sorting;

            btn_open.Click += Btn_open_Click;
            btn_save.Click += Btn_save_Click;
            btn_customize.Click += Btn_customize_Click;
            btn_slot_cheat.Click += Btn_slot_cheat_Click;
            btn_set_bonus_cheat.Click += Btn_set_bonus_cheat_Click;
            btn_skill_level_cheat.Click += Btn_skill_level_cheat_Click;
            btn_zenny_cheat.Click += Btn_zenny_cheat_Click;
            btn_damage_cheat.Click += Btn_damage_cheat_Click;
            btn_enable_all_coatings_cheat.Click += Btn_enable_all_coatings_cheat_Click;
            btn_max_sharpness_cheat.Click += Btn_max_sharpness_cheat_Click;
            btn_unlock_skill_limit_cheat.Click += Btn_unlock_skill_limit_cheat_Click;
            btn_sort_jewel_order_by_name.Click += Btn_sort_jewel_order_by_name_Click;

            Width = SystemParameters.MaximizedPrimaryScreenWidth * 0.8;
            Height = SystemParameters.MaximizedPrimaryScreenHeight * 0.5;
        }

        private void Dg_items_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e) {
            Debug.Assert(e.PropertyName != null, "e.PropertyName != null");

            switch (e.PropertyName) {
                case nameof(IMhwItem.Bytes):
                case nameof(IMhwItem.Changed):
                    e.Cancel = true; // Internal.
                    break;
                case nameof(IMhwItem.Offset):
                case nameof(IMhwItem.Raw_Data):
                    e.Cancel = !SHOW_RAW_BYTES; // Only for debug builds.
                    break;
                case nameof(Ranged.Muzzle_Type):
                case nameof(Ranged.Barrel_Type):
                case nameof(Ranged.Magazine_Type):
                case nameof(Ranged.Scope_Type):
                case nameof(Ranged.Shell_Type_Id):
                case nameof(Ranged.Deviation):
                    e.Cancel = targetFileType.Is(typeof(Bow));
                    break;
                case nameof(IMhwItem.Name): // None of the following have names.
                    e.Cancel = targetFileType.Is(typeof(BottleTable),
                                                 typeof(ArmUp),
                                                 typeof(Sharpness),
                                                 typeof(ShellTable),
                                                 typeof(SkillDat),
                                                 typeof(NewLimitBreak),
                                                 typeof(NewLimitBreak2),
                                                 typeof(WeaponWSword),
                                                 typeof(WeaponWhistle),
                                                 typeof(WeaponGunLance),
                                                 typeof(SkillPointData),
                                                 typeof(ASkill),
                                                 typeof(EqCrt),
                                                 typeof(EqCus));
                    break;
                case nameof(SkillDat.Id):
                    e.Cancel = targetFileType.Is(typeof(SkillDat));
                    break;
                case nameof(EqCrt.Mat_1_Id):
                case nameof(EqCrt.Mat_2_Id):
                case nameof(EqCrt.Mat_3_Id):
                case nameof(EqCrt.Mat_4_Id):
                case nameof(NewLimitBreak.Needed_Item_Id_to_Unlock):
                case nameof(ASkill.Mantle_Item_Id):
                case nameof(Armor.Set_Skill_1):
                case nameof(Armor.Set_Skill_2):
                case nameof(Armor.Skill_1):
                case nameof(Armor.Skill_2):
                case nameof(Armor.Skill_3):
                case nameof(Melee.Skill):
                    e.Cancel = true; // Cancel for itemId/skillId columns as we will use a text version with onClick opening a selector.
                    break;
                default:
                    e.Cancel = e.PropertyName.EndsWith("Raw");
                    break;
            }

            if (e.Cancel) return;

            switch (e.PropertyName) {
                case nameof(EqCrt.Item_Category): {
                    var fileName = Path.GetFileNameWithoutExtension(targetFile);
                    if (!EqCrt.categoryLookup.ContainsKey(fileName)) break;

                    var cb = new DataGridComboBoxColumn {
                        Header = e.Column.Header,
                        ItemsSource = EqCrt.categoryLookup[fileName],
                        SelectedValueBinding = new Binding(e.PropertyName),
                        SelectedValuePath = "Key",
                        DisplayMemberPath = "Value",
                        CanUserSort = true
                    };
                    e.Column = cb;
                    break;
                }
            }

            e.Column.CanUserSort = true;

            // Use [DisplayName] attribute for the column header text.
            Type sourceClassType = ((dynamic) e.PropertyDescriptor).ComponentType;
            var propertyInfo = sourceClassType.GetProperties().FirstOrDefault(info => info.Name == e.PropertyName);

            var displayName = ((DisplayNameAttribute) propertyInfo?.GetCustomAttribute(typeof(DisplayNameAttribute), true))?.DisplayName;
            var sortOrder = ((SortOrderAttribute) propertyInfo?.GetCustomAttribute(typeof(SortOrderAttribute), true))?.sortOrder;

            if (displayName != null) {
                e.Column.Header = displayName;
            }

            columnMap[e.PropertyName] = new ColumnHolder(e.Column, sortOrder ?? -1);

            // TODO: Fix enum value display at some point.
        }

        private void Dg_items_AutoGeneratedColumns(object sender, EventArgs e) {
            var columns = columnMap.Values.ToList();
            columns.Sort((c1, c2) => c1.sortOrder.CompareTo(c2.sortOrder));
            for (var i = 0; i < columns.Count; i++) {
                columns[i].column.DisplayIndex = i;
            }
        }

        private void Dg_items_GotFocus(object sender, RoutedEventArgs e) {
            // Lookup for the source to be DataGridCell
            if (SingleClickToEditMode && e.OriginalSource is DataGridCell cell) {
                if (cell.Content is TextBlock) {
                    Dg_items_cell_MouseClick(cell, null);
                    return;
                }

                // Starts the Edit on the row;
                dg_items.BeginEdit(e);

                if (cell.Content is ComboBox cbx) {
                    cbx.IsDropDownOpen = true;
                }
            }
        }

        private void Dg_items_cell_MouseClick(object sender, MouseButtonEventArgs e) {
            if (sender is DataGridCell cell) {
                // We come here on both single & double click. If we don't check for focus, this hijacks the click and prevents focusing.
                if (e?.ClickCount == 1 && !cell.IsFocused) return;

                // Have to loop though our column list to file the original property name.
                foreach (var propertyName in columnMap.Keys.Where(key => key.Contains("_button"))) {
                    if (cell.Column != columnMap[propertyName].column) continue;

                    EditSelectedItemId(cell, propertyName);
                    break;
                }
            }
        }

        private void EditSelectedItemId(FrameworkElement cell, string propertyName) {
            var obj = (MhwItem) cell.DataContext;
            var property = obj.GetType().GetProperty(propertyName.Replace("_button", ""), BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            Debug.Assert(property != null, nameof(property) + " != null");

            var value = (ushort) Convert.ChangeType(property.GetValue(obj), TypeCode.UInt16);
            var dataSourceType = ((DataSourceAttribute) property.GetCustomAttribute(typeof(DataSourceAttribute), true))?.dataType;

            Dictionary<ushort, IdNamePair> dataSource;
            switch (dataSourceType) {
                case DataSourceType.Items:
                    dataSource = DataHelper.itemData[locale];
                    break;
                case DataSourceType.Skills:
                    dataSource = DataHelper.skillData[locale];
                    break;
                default: throw new ArgumentOutOfRangeException();
            }

            var getNewItemId = new GetNewItemId(value, dataSource);
            getNewItemId.ShowDialog();

            if (!getNewItemId.cancelled) {
                property.SetValue(obj, getNewItemId.currentItem);
                obj.OnPropertyChanged(propertyName);
            }
        }

        private void Dg_items_Sorting(object sender, DataGridSortingEventArgs e) {
            // || targetFileType.Is(typeof(Gem)) && (string) e.Column.Header == "Skill 1"
            // || targetFileType.Is(typeof(Gem)) && (string) e.Column.Header == "Skill 2"
            if (targetFileType.Is(typeof(SkillDat)) && e.Column == columnMap[nameof(SkillDat.Name_And_Id)].column) {
                var direction = (e.Column.SortDirection != ListSortDirection.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending;
                SkillDatSorter.INSTANCE.direction = direction;
                e.Column.SortDirection = direction;

                var listColView = (ListCollectionView) dg_items.ItemsSource;
                listColView.CustomSort = SkillDatSorter.INSTANCE;

                e.Handled = true;
            }
        }

        private void Btn_open_Click(object sender, RoutedEventArgs e) {
            var target = Open();
            if (string.IsNullOrEmpty(target)) return;
            Load(target);

            columnMap = new Dictionary<string, ColumnHolder>();
            dg_items.ItemsSource = null;
            dg_items.ItemsSource = new ListCollectionView(items);
        }

        private void Btn_save_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;
            Save();
        }

        private void Btn_customize_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(SkillDat), typeof(Armor))) return;

            foreach (var item in items) {
                switch (item) {
                    case SkillDat _: {
                        SkillDat skillDat = item;

                        switch (skillDat.Id) {
                            case SkillDataValueClass.Scholar:
                            case SkillDataValueClass.Scenthound:
                                skillDat.Param_5 = 5000;
                                break;
                            case SkillDataValueClass.Tool_Specialist:
                                skillDat.Param_5 = 1;
                                break;
                            case SkillDataValueClass.Item_Prolonger:
                                skillDat.Param_5 = 5000;
                                break;
                            case SkillDataValueClass.Focus:
                                skillDat.Param_6 = 1;
                                break;
                        }

                        break;
                    }
                    case Armor _: {
                        Armor armor = item;

                        // 386: Guildwork Head α+
                        if (armor.Id == 386) {
                            armor.Skill_1 = SkillDataValueClass.Effluvial_Expert;
                            armor.Skill_1_Level = 10;
                            armor.Skill_2 = SkillDataValueClass.Scholar;
                            armor.Skill_2_Level = 10;
                            armor.Skill_3 = SkillDataValueClass.Aquatic_Polar_Mobility;
                            armor.Skill_3_Level = 10;
                        }

                        // 797: Kushala Cista α+
                        if (armor.Id == 797) {
                            armor.Skill_1 = SkillDataValueClass.Bow_Charge_Plus;
                            armor.Skill_1_Level = 10;
                            armor.Skill_2 = SkillDataValueClass.Coldproof;
                            armor.Skill_2_Level = 10;
                            armor.Skill_3 = SkillDataValueClass.Defense_Boost;
                            armor.Skill_3_Level = 10;
                        }

                        // 1009: Kirin Longarms α+
                        if (armor.Id == 1221) {
                            armor.Skill_1 = SkillDataValueClass.Effluvia_Resistance;
                            armor.Skill_1_Level = 10;
                            armor.Skill_2 = SkillDataValueClass.Focus;
                            armor.Skill_2_Level = 10;
                            armor.Skill_3 = SkillDataValueClass.Free_Meal;
                            armor.Skill_3_Level = 10;
                        }

                        // 1632: Fellshroud Coil α+
                        if (armor.Id == 1632) {
                            armor.Skill_1 = SkillDataValueClass.Guard;
                            armor.Skill_1_Level = 10;
                            armor.Skill_2 = SkillDataValueClass.Guard_Up;
                            armor.Skill_2_Level = 10;
                            armor.Skill_3 = SkillDataValueClass.Heat_Guard;
                            armor.Skill_3_Level = 10;
                        }

                        // 2050: Rimeguard Greaves α+
                        if (armor.Id == 2050) {
                            armor.Skill_1 = SkillDataValueClass.Hunger_Resistance;
                            armor.Skill_1_Level = 10;
                            armor.Skill_2 = SkillDataValueClass.Maximum_Might;
                            armor.Skill_2_Level = 10;
                            armor.Skill_3 = SkillDataValueClass.Mind_s_Eye_Ballistics;
                            armor.Skill_3_Level = 10;
                        }

                        // 2473: Critical Charm II
                        if (armor.Id == 2473) {
                            armor.Skill_1 = SkillDataValueClass.Non_elemental_Boost;
                            armor.Skill_1_Level = 10;
                            armor.Skill_2 = SkillDataValueClass.Power_Prolonger;
                            armor.Skill_2_Level = 10;
                            armor.Skill_3 = SkillDataValueClass.Quick_Sheath;
                            armor.Skill_3_Level = 10;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_slot_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(IWeapon), typeof(Armor), typeof(ASkill))) return;

            foreach (var item in items) {
                switch (item) {
                    case ISlots _: {
                        item.Slot_Count = 3;
                        item.Slot_1_Size = 4;
                        item.Slot_2_Size = 4;
                        item.Slot_3_Size = 4;

                        break;
                    }
                    case ASkill _: {
                        ASkill aSkill = item;
                        aSkill.Deco_Count = 2;
                        aSkill.Deco_Lvl_1 = 4;
                        aSkill.Deco_Lvl_2 = 4;

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_set_bonus_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(Armor))) return;

            foreach (Armor item in items) {
                if (item.Set_Skill_1_Level > 0) {
                    item.Set_Skill_1_Level = 5;
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_skill_level_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(Gem), typeof(Armor))) return;

            foreach (var item in items) {
                switch (item) {
                    case Gem _: {
                        Gem gem = item;

                        gem.Skill_1_Level = 10;

                        if (gem.Skill_2_Level > 0) {
                            gem.Skill_2_Level = 10;
                        }

                        break;
                    }
                    case Armor _: {
                        Armor armor = item;

                        if (armor.Skill_1_Level > 0) {
                            armor.Skill_1_Level = 10;
                        }

                        if (armor.Skill_2_Level > 0) {
                            armor.Skill_2_Level = 10;
                        }

                        if (armor.Skill_3_Level > 0) {
                            armor.Skill_3_Level = 10;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_zenny_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(Item), typeof(Armor), typeof(IWeapon))) return;

            foreach (var item in items) {
                switch (item) {
                    case Item _: {
                        Item itm = item;

                        if (itm.Buy_Price > 0) {
                            itm.Buy_Price = 1;
                        }

                        break;
                    }
                    case Armor _: {
                        Armor armor = item;

                        if (armor.Cost > 0) {
                            armor.Cost = 1;
                        }

                        break;
                    }
                    case IWeapon _: {
                        IWeapon weapon = item;

                        if (weapon.Cost > 0) {
                            weapon.Cost = 1;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_damage_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(IWeapon))) return;

            foreach (IWeapon item in items) {
                if (item.Damage > 0) {
                    item.Damage = 5000;
                }

                ((MhwItem) item).OnPropertyChanged();
            }
        }

        private void Btn_enable_all_coatings_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(BottleTable))) return;

            foreach (BottleTable item in items) {
                item.Close_Range = CoatingType.Plus;
                item.Power = CoatingType.Plus;
                item.Paralysis = CoatingType.Plus;
                item.Poison = CoatingType.Plus;
                item.Sleep = CoatingType.Plus;
                item.Blast = CoatingType.Plus;

                item.OnPropertyChanged();
            }
        }

        private void Btn_max_sharpness_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(Sharpness), typeof(Melee))) return;

            foreach (var item in items) {
                switch (item) {
                    case Sharpness _: {
                        Sharpness sharpness = item;

                        sharpness.Red = 10;
                        sharpness.Orange = 10;
                        sharpness.Yellow = 10;
                        sharpness.Green = 10;
                        sharpness.Blue = 10;
                        sharpness.White = 10;
                        sharpness.Purple = 400;

                        break;
                    }
                    case Melee _: {
                        Melee weapon = item;

                        if (weapon.Sharpness_Amount > 0) {
                            weapon.Sharpness_Amount = 5;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_unlock_skill_limit_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(SkillDat))) return;

            foreach (SkillDat item in items) {
                item.Param_1 = 0;
                item.Param_2 = 0;
                item.Param_3 = 0;
                item.Param_4 = 0;

                item.OnPropertyChanged();
            }
        }

        private void Btn_sort_jewel_order_by_name_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!targetFileType.Is(typeof(Item))) return;

            var rawList = new List<GemData>();
            for (var i = 0; i < items.Count; i++) {
                Item item = items[i];
                if (item.Name.Contains(" Jewel")) {
                    rawList.Add(new GemData {index = i, itemName = item.Name, sortOrder = item.Sort_Order});
                }
            }

            // One list of the sorted "sortOrder"s.
            var sortedSortIndexes = new List<GemData>(rawList)
                                    .OrderBy(data => data.sortOrder)
                                    .Select(data => data.sortOrder)
                                    .ToList();
            // And another list of item indexes, sorted by gem name.
            var sortedGemNameIndexes = new List<GemData>(rawList)
                                       .OrderBy(data => data.itemName)
                                       .Select(data => data.index)
                                       .ToList();

            for (var i = 0; i < sortedSortIndexes.Count; i++) {
                var index = sortedGemNameIndexes[i];
                var newSortIndex = sortedSortIndexes[i];
                Item item = items[index];
                item.Sort_Order = newSortIndex;
            }
        }

        private string Open() {
            var ofdResult = new OpenFileDialog {
                Filter = $"MHW Data Files (See mod description for full list.)|{string.Join(";", FILE_TYPES)}",
                Multiselect = false
            };
            ofdResult.ShowDialog();

            return ofdResult.FileName;
        }

        private void Load(string target) {
            targetFile = target;
            targetFileType = GetFileType();
            items.Clear();
            Title = Path.GetFileName(targetFile);

            const BindingFlags flags = BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy;
            var initialOffset = (ulong) targetFileType.GetField(nameof(Armor.InitialOffset), flags).GetValue(null);
            var structSize = (uint) targetFileType.GetField(nameof(Armor.StructSize), flags).GetValue(null);
            var entryCountOffset = (long) targetFileType.GetField(nameof(Armor.EntryCountOffset), flags).GetValue(null);

            // ReSharper disable once ConditionIsAlwaysTrueOrFalse
#pragma warning disable 162
            if (ENABLE_CHEAT_BUTTONS) {
                btn_customize.Visibility = targetFileType.Is(typeof(Armor), typeof(SkillDat)) ? Visibility.Visible : Visibility.Collapsed;
                btn_slot_cheat.Visibility = targetFileType.Is(typeof(Armor), typeof(IWeapon), typeof(ASkill)) ? Visibility.Visible : Visibility.Collapsed;
                btn_skill_level_cheat.Visibility = targetFileType.Is(typeof(Armor), typeof(Gem)) ? Visibility.Visible : Visibility.Collapsed;
                btn_set_bonus_cheat.Visibility = targetFileType.Is(typeof(Armor)) ? Visibility.Visible : Visibility.Collapsed;
                btn_zenny_cheat.Visibility = targetFileType.Is(typeof(Armor), typeof(Item), typeof(IWeapon)) ? Visibility.Visible : Visibility.Collapsed;
                btn_damage_cheat.Visibility = targetFileType.Is(typeof(IWeapon)) ? Visibility.Visible : Visibility.Collapsed;
                btn_enable_all_coatings_cheat.Visibility = targetFileType.Is(typeof(BottleTable)) ? Visibility.Visible : Visibility.Collapsed;
                btn_max_sharpness_cheat.Visibility = targetFileType.Is(typeof(Sharpness), typeof(Melee)) ? Visibility.Visible : Visibility.Collapsed;
                btn_unlock_skill_limit_cheat.Visibility = targetFileType.Is(typeof(SkillDat)) ? Visibility.Visible : Visibility.Collapsed;
            }
#pragma warning restore 162

            btn_sort_jewel_order_by_name.Visibility = targetFileType.Is(typeof(Item)) ? Visibility.Visible : Visibility.Collapsed;

            var weaponFilename = Path.GetFileNameWithoutExtension(targetFile);

            using (var dat = new BinaryReader(new FileStream(targetFile, FileMode.Open, FileAccess.Read))) {
                if (entryCountOffset >= 0) {
                    ReadStructsAsKnownLength(dat, structSize, initialOffset, weaponFilename, entryCountOffset);
                } else {
                    ReadStructsAsUnknownLength(dat, structSize, initialOffset, weaponFilename);
                }
            }
        }

        private void ReadStructsAsKnownLength(BinaryReader dat, uint structSize, ulong initialOffset, string weaponFilename, long entryCountOffset) {
            dat.BaseStream.Seek(entryCountOffset, SeekOrigin.Begin);
            var count = dat.ReadInt32();

            dat.BaseStream.Seek((long) initialOffset, SeekOrigin.Begin);

            for (var i = 0; i < count; i++) {
                var position = dat.BaseStream.Position;
                var buff = dat.ReadBytes((int) structSize);

                object obj;
                if (targetFileType.Is(typeof(IWeapon))) {
                    obj = Activator.CreateInstance(targetFileType, buff, (ulong) position, weaponFilename);
                } else {
                    obj = Activator.CreateInstance(targetFileType, buff, (ulong) position);
                }

                if (obj == null) return;

                items.Add(obj);
            }
        }

        private void ReadStructsAsUnknownLength(BinaryReader dat, uint structSize, ulong offset, string weaponFilename) {
            var len = (ulong) dat.BaseStream.Length;
            do {
                var buff = new byte[structSize];
                dat.BaseStream.Seek((long) offset, SeekOrigin.Begin);
                dat.Read(buff, 0, (int) structSize);

                object obj;
                if (targetFileType.Is(typeof(IWeapon))) {
                    obj = Activator.CreateInstance(targetFileType, buff, offset, weaponFilename);
                } else {
                    obj = Activator.CreateInstance(targetFileType, buff, offset);
                }

                if (obj == null) return;

                items.Add(obj);

                offset += structSize;
            } while (offset + structSize <= len);
        }

        private async void Save() {
            try {
                var changesSaved = false;
                using (var dat = new BinaryWriter(new FileStream(targetFile, FileMode.Open, FileAccess.Write))) {
                    foreach (IMhwItem item in items) {
                        if (item.Offset == 0 || !item.Changed) continue;

                        dat.BaseStream.Seek((long) item.Offset, SeekOrigin.Begin);
                        dat.Write(item.Bytes);

                        item.Changed = false;
                        changesSaved = true;
                    }
                }

                savedTimer?.Cancel();
                savedTimer = new CancellationTokenSource();
                lbl_saved.Visibility = changesSaved ? Visibility.Visible : Visibility.Collapsed;
                lbl_no_changes.Visibility = changesSaved ? Visibility.Collapsed : Visibility.Visible;
                try {
                    await Task.Delay(3000, savedTimer.Token);
                    lbl_saved.Visibility = lbl_no_changes.Visibility = Visibility.Hidden;
                } catch (TaskCanceledException) {
                }
            } catch (Exception e) {
                MessageBox.Show(this, e.Message, "Save Error");
            }
        }

        private Type GetFileType() {
            var fileName = Path.GetFileName(targetFile);
            Debug.Assert(fileName != null, nameof(fileName) + " != null");

            if (fileName.EndsWith(".wp_dat")) {
                return typeof(Melee);
            }

            if (fileName.EndsWith(".wp_dat_g")) {
                if (fileName.StartsWith("bow")) {
                    return typeof(Bow);
                }

                if (fileName.StartsWith("lbg") || fileName.StartsWith("hbg")) {
                    return typeof(BowGun);
                }
            }

            if (fileName.EndsWith(".am_dat")) {
                return typeof(Armor);
            }

            if (fileName.EndsWith(".sgpa")) {
                return typeof(Gem);
            }

            if (fileName.EndsWith(".itm")) {
                return typeof(Item);
            }

            if (fileName.EndsWith(".bbtbl")) {
                return typeof(BottleTable);
            }

            if (fileName.EndsWith(".arm_up")) {
                return typeof(ArmUp);
            }

            if (fileName.EndsWith(".kire")) {
                return typeof(Sharpness);
            }

            if (fileName.EndsWith(".skl_dat")) {
                return typeof(SkillDat);
            }

            if (fileName.EndsWith(".shl_tbl")) {
                return typeof(ShellTable);
            }

            if (fileName.EndsWith(".new_lbr")) {
                return typeof(NewLimitBreak);
            }

            if (fileName.EndsWith(".new_lb")) {
                return typeof(NewLimitBreak2);
            }

            if (fileName.EndsWith(".wep_wsd")) {
                return typeof(WeaponWSword);
            }

            if (fileName.EndsWith(".wep_wsl")) {
                return typeof(WeaponWhistle);
            }

            if (fileName.EndsWith(".wep_glan")) {
                return typeof(WeaponGunLance);
            }

            if (fileName.EndsWith(".wep_saxe")) {
                return typeof(WeaponSwitchAxe);
            }

            if (fileName.EndsWith(".skl_pt_dat")) {
                return typeof(SkillPointData);
            }

            if (fileName.EndsWith(".ask")) {
                return typeof(ASkill);
            }

            if (fileName.EndsWith(".eq_crt")) {
                return typeof(EqCrt);
            }

            if (fileName.EndsWith(".eq_cus")) {
                return typeof(EqCus);
            }

            if (fileName.EndsWith(".plfe")) {
                return typeof(Plfe);
            }

            if (fileName.EndsWith(".plit")) {
                return typeof(Plit);
            }

            throw new Exception($"No type found for: {fileName}");
        }
    }
}